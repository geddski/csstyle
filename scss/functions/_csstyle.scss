$_csstyle_has_root_id: false;

@function reset_csstyle() {
  $csstyle-component-symbol: '' !global;
  $csstyle-option-symbol: '--' !global;
  $csstyle-part-symbol: '/' !global;
  $csstyle-tweak-symbol: '+' !global;
  $csstyle-location-symbol: '@' !global;
  $csstyle-root-id: 'app' !global;
  
  @return (
    id: $csstyle-root-id,
    component: $csstyle-component-symbol,
    option: $csstyle-option-symbol,
    part: $csstyle-part-symbol,
    tweak: $csstyle-tweak-symbol,
    location: $csstyle-location-symbol,
  );
}

@function _csstyle_compile_options($option_rules) {
  $options: ();
  
  @each $alternatives in $option_rules {
    @if length($options) > 0 {
      $new_options: ();
      
      @each $option in $options {
        @each $alt in $alternatives {
          $new_options: append($new_options, $option + option($alt))
        }
      }
      
      $options: $new_options;
    } @else {
      @each $alt in $alternatives {
        $options: append($options, option($alt))
      }
    }
  }
  
  @return $options;
}

@function _csstyle_apply_options($selector) {
  $components: map-get(last($_csstyle_rules), 'component');
  $options: map-get(last($_csstyle_rules), 'options');
  $option_rules: _csstyle_compile_options($options);
  $selector: selector-parse($selector);
  $compiled: ();
  
  @each $component in $components {
    @each $identifier in $selector {
      $sep: list-separator($identifier);
      $sep: if($sep == space, ' ', '');
      $identifier: to-string($identifier, $sep);
      $componentStartIndex: str-index($identifier, '.' + $component);
      
      @if $componentStartIndex != null {
        $component: str-slice($identifier, $componentStartIndex);
        $dotIndex: str-index(str-slice($component, 2), '.');
        $spaceIndex: str-index($component, ' ');
        $componentEndIndex: str-length($component);
        
        $dotIndex: if($dotIndex == null, null, $dotIndex + 1);
        
        @if ($dotIndex != null) and ($spaceIndex != null) {
          $componentEndIndex: if($dotIndex < $spaceIndex, $dotIndex - 1, $spaceIndex - 1);
        } @else if $dotIndex != null {
          $componentEndIndex: $dotIndex - 1;
        } @else if $spaceIndex != null {
          $componentEndIndex: $spaceIndex - 1;
        }
        
        $component: str-slice($component, 1, $componentEndIndex);
        
        @each $option in $option_rules {
          $compiled: append($compiled, str-insert($identifier, $option, $componentStartIndex + $componentEndIndex), comma);
        }
      }
    }
  }
  
  @return $compiled;
}

@function _csstyle_compile_parts($part_rules) {
  $parts: ();
  
  @each $alternatives in $part_rules {
    @if length($parts) > 0 {
      $new_parts: ();
      
      @each $part in $parts {
        @each $alt in $alternatives {
          $new_parts: append($new_parts, $part + part($alt));
        }
      }
      
      $parts: $new_parts;
    } @else {
      @each $alt in $alternatives {
        $parts: append($parts, part($alt))
      }
    }
  }
  
  @return $parts;
}

@function _csstyle_compile_component($component, $parts, $options) {
  $selector: '';
  $component: component($component);
  $parts: _csstyle_compile_parts($parts);
  $options: _csstyle_compile_options($options);
  
  @each $part in $parts {
    @each $option in $options {
      $selector: $selector + $component + $part + $option;
      
      @if $option != last($options) {
        $selector: $selector + ', ';
      }
    }
    
    @if length($options) == 0 {
      $selector: $selector + $component + $part;
    }
    
    @if $part != last($parts) {
      $selector: $selector + ', ';
    }
  }
  
  @if length($parts) == 0 {
    @if length($options) == 0 {
      @return $component;
    }
    
    @each $option in $options {
      $selector: $selector + $component + $option;
      
      @if $option != last($options) {
        $selector: $selector + ', ';
      }
    }
  }
  
  @return $selector;
}

@function _csstyle_compile_tweak($tweak, $options) {
  $_csstyle_has_root_id: true !global;
  $selector: '';
  $tweak: tweak($tweak);
  $options: _csstyle_compile_options($options);
  
  @if length($options) == 0 {
    @return $tweak;
  }
  
  @each $option in $options {
    $selector: $selector + $tweak + $option;
    
    @if $option != last($options) {
      $selector: $selector + ', ';
    }
  }
  
  @return $selector;
}

@function _csstyle_compile_location($location, $options) {
  $_csstyle_has_root_id: true !global;
  $selector: '';
  $location: location($location);
  $options: _csstyle_compile_options($options);
  
  @if length($options) == 0 {
    @return $location;
  }
  
  @each $option in $options {
    $selector: $selector + $location + $option;
    
    @if $option != last($options) {
      $selector: $selector + ', ';
    }
  }
  
  @return $selector;
}

@function _csstyle_compile_rule($rule) {
  $selector: '';
  $locations: map-get($rule, 'location');
  $tweaks: map-get($rule, 'tweak');
  $components: map-get($rule, 'component');
  $parts: map-get($rule, 'parts');
  $options: map-get($rule, 'options');
  
  @if ($components != null) {
    @each $component in $components {
      $selector: $selector + _csstyle_compile_component($component, $parts, $options);
      
      @if $component != last($components) {
        $selector: $selector + ', ';
      }
    }
    
    @return $selector;
  }
  
  @if ($tweaks != null) {
    @each $tweak in $tweaks {
      $selector: $selector + _csstyle_compile_tweak($tweak, $options);
      
      @if $tweak != last($tweaks) {
        $selector: $selector + ', ';
      }
    }
    
    @return $selector;
  }
  
  @each $location in $locations {
    $selector: $selector + _csstyle_compile_location($location, $options);
    
    @if $location != last($locations) {
      $selector: $selector + ', ';
    }
  }
  
  @return $selector;
}

@function _csstyle_compile() {
  $selector: '';
  $_csstyle_has_root_id: false !global;
  
  @each $rule in $_csstyle_rules {
    @if $selector != '' {
      $selector: selector-nest($selector, _csstyle_compile_rule($rule));
    } @else {
      $selector: _csstyle_compile_rule($rule)
    }
  }
  
  @if $_csstyle_has_root_id {
    @return selector-nest('#' + $csstyle-root-id, $selector);
  }
  
  @return $selector;
}
