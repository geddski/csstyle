// csstyle v1.3.1 for sass
// Clean, Simple Styling for the Web
// http://www.csstyle.io
// Copyright (c) 2014 Dave Geddes
// https://twitter.com/geddski
// https://github.com/geddski
// Example & test: http://sassmeister.com/gist/a2de6b407b2a97addb0b

$csstyle-option-symbol: '--' !default;
$csstyle-part-symbol: '__' !default;
$csstyle-tweak-symbol: '+' !default;
$csstyle-location-symbol: '@' !default;
$csstyle-root-id: 'csstyle' !default;


// Escape characters
// More info @ http://sassmeister.com/gist/6f21559db1fa50d48972
@function escape_symbols($symbol, $is_partial: false){
    $allowed: '-','_','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9';
    $not_allowed_as_first: '_','0','1','2','3','4','5','6','7','8','9';
    $escaped: '';
    
    @for $i from 1 through str-length($symbol){
        @if (index($allowed, str-slice($symbol, $i, $i)) == null or ($is_partial == false and $i == 1 and index($not_allowed_as_first, str-slice($symbol, $i, $i)) != null)) {
            $escaped: $escaped + ('\\' + str-slice($symbol, $i, $i));
        } @else {
            $escaped: $escaped + str-slice($symbol, $i, $i);
        }
    }
    
    // handle special -- case
    @if($is_partial == false and str-slice($symbol, 1, 2) == '--'){
        $escaped: '\\' + $escaped;
    }
    
    @return $escaped;
}

// build selectors
@function _build_selector($prefix, $names){
    $selector: '';
    
    @for $i from 1 through length($names){
        $selector: $selector + $prefix + nth($names, $i);
        
        @if($i != length($names)){
            $selector: $selector + ', ';
        }
    }
    
    @return $selector;
}

// components
@mixin component($names...){
    #{_build_selector(".", $names)}{
        @content;
    }
}

// options
// override components
@mixin option($names...){
    #{_build_selector("&." + escape_symbols($csstyle-option-symbol), $names)}{
        @content;
    }
}

// parts
// make up the structure of a component
// override components
@mixin part($names...){
    // check if nested in an option
    $optionIndex: str-index("#{&}", "." + $csstyle-option-symbol);
    $optionIndex: 0 !default;
    $optionIndex: $optionIndex - 1;
    
    // check if nested in another part
    $partIndex: str-index("#{&}", $csstyle-part-symbol);
    $partIndex: 0 !default;
    $partIndex: $partIndex - 1;
    
    $component: str-slice(#{&}, 0, $optionIndex);
    
    // part is nested in an option and not nested in another part within that option
    @if ($optionIndex > 0 and $partIndex < $optionIndex) {
        #{_build_selector($component + escape_symbols($csstyle-part-symbol), $names)}{
            @content;
        }
    } @else {
        #{_build_selector("&" + escape_symbols($csstyle-part-symbol), $names)}{
            @content;
        }
    }
}

// tweaks
// override components, options, and modifiers
@mixin tweak($names...){
    #{_build_selector("#" + $csstyle-root-id + " ." + escape_symbols($csstyle-tweak-symbol), $names)}{
        @content;
    }
}

// locations
// override components, parts, options, and tweaks
@mixin location($names...){
    #{_build_selector("#" + $csstyle-root-id + " ." + escape_symbols($csstyle-location-symbol), $names)}{
        @content;
    }
}
